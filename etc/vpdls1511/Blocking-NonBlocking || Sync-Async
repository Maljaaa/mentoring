Sync-Async , Blocking-non blocking 이 두개는 모두 동기/비동기 이다.

그렇다보니 이 두가지 단어를 조금 혼용해서 사용하여 혼란을 유래할 수 있다.

그렇기때문에 이에 대한 내용들을 조금 자세히 정리하여보자.

# Sync-Async

우선, 우리가 알고있는 기본적인 동기와 비동기 이다.

Sync - 동기
Async - 비동기

## Sync - 동기

![스크린샷 2022-04-14 오후 8.13.52.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ecfaf892-9d7c-4218-9814-d864f5ad1216/스크린샷_2022-04-14_오후_8.13.52.png)

작업이 끝난 뒤 작업을 하는것을 “동기방식” 이라고 한다.

## Async - 비동기

![스크린샷 2022-04-14 오후 8.15.17.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ff9b33d3-224d-4be3-87c8-ec6e22fb4dbb/스크린샷_2022-04-14_오후_8.15.17.png)

이처럼 작업이 끝나기 전, 다른 작업을 같이 병행하여 진행하는것을 비동기 라고 한다. 병렬처리라고 볼 수 있다.

# Blocking - Non Block

Blocking - Non Blocking도 동기와 비동기 이다.

하지만, Sync - Async와는 조금 다르다. 바로 제어권에 있는것인데 Blocking - Non Blocking의 경우는 호출되는 함수에게 제어권이 있다

## Blocking

- 요청한 작업을 마칠 때 까지 계속 대기를 한다.
- Thread 관점으로 본다면, 요청한 작업을 마칠 대 까지 계속 대기하며, return값을 받을 때 까지 한 Thread를 계속 사용/대기 한다.

## Non Blocking

- 요청한 작업을 즉시 마칠 수 없다면, return 한다.
- Thread 관점으로 본다면, 하나의 Thread가 여러개의 IO를 처리가 가능하다.
